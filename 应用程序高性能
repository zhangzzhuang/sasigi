# 应用程序高性能

## 1. 制约程序性能的根源

### 常用的性能评估指标

* 并发: 同一时间多少请求访问
    * TPS: transaction per second，一秒钟可以处理多少个事务 
        
        可以理解为存在存储层(DB)的数据的修改或者写入
    
    * QPS: query per second，一秒钟可以处理多少个查询
    
        可以理解为仅存在存储层(DB)的数据的查询

* 耗时: 端到端耗时、服务端耗时、应用程序耗时
    * 95线: 95%的请求落在什么范围内
    * 99线: 99%的请求落在什么范围内
    
### 制约程序性能的根源

#### 传输维度
* 网络
#### 软件维度
* 应用本身
* 数据库
* 缓存
* 消息组件
#### 硬件维度
* 操作系统
* 内存
* IO
* CPU


## 2. 将应用程序优化到极致

### JVM内存结构

**jdk8之前**

![avator](../image/61618038867_.pic.jpg)

* 程序计数器(线程私有)

    计数器记录的是虚拟机字节码指令的地址(当前指令的地址)
    
    通俗的将就是当前线程运行到哪里了

* java虚拟机栈

    线程私有的。每个方法在执行的时候也会创建一个栈帧，存储了局部变量、操作数、动态链接、方法返回地址。
    
* 本地方法栈

    和虚拟机类似，主要为虚拟机使用到的Native方法服务
    
* 堆
    
    被所有线程共享的一块内存区域，在虚拟机启动的时候创建，用于存放对象实例
    
* 方法区

    用于存储已经被虚拟机加载的类信息、常量、静态变量等等。

**jdk8之后**

![avator](../image/71618040282_.pic.jpg)

* 元数据区

    代替永久代，存放类信息、常量、静态变量等，字符串在1.7开始放到了堆中
    

### GC算法

* 1.标记-清除
    
    * 流程 - 分为“标记”和“清除”两个阶段：
                    
          （1）首先标记出所需要回收的对象（引用计数法和可达性分析，两次标记过程）；
          （2）在标记完成后统一回收所有被标记的对象。
    
    * 缺点 
    
          （1）效率问题：标记和清除两个过程的效率不高；
          （2）空间问题：标记清除后会产生大量不连续的内存碎片，导致以后在程序运行过程中需要分配较大对象时，
           无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。

* 2.复制
        
    * 流程 - 可以解决效率问题，将可用的内存按容量划分为大小相等的两块。
    
          （1）每次只使用其中的一块；
          （2）当这一块用完了，就将还存活的对象复制到另一块上；
          （3）然后再把已使用的内存空间清理掉。
    
    * 优点
    
          每次对整个半区进行内存回收，避免内存碎片问题，只需移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。
          
    * 缺点
    
          在对象存活率较高的时候，效率低下                      
    
    * 应用 
    
          回收新生代，新生代中分为Eden空间和两块较小的Survivor空间，
          每次使用Eden和其中的一块Survivor。默认Eden：Survivor=8:1，Survivor不够时，老年代内存分配担保。
          
* 3.标记-整理
        
    * 流程
    
          （1）首先标记出所需要回收的对象；
          （2）不直接对可回收对象进行清理，让所有存活的对象都向一端移动；
          （3）直接清理掉端边界以外的内存。
    
    * 优点
    
          改进了复制算法在对象存活率较高时带来的效率问题；
    
    * 应用 
    
          老年代收集（对象存活率较高）
          
* 4.分代收集

    * 思想 - 根据对象存活周期的不同将内存划分为新生代和老年代，根据各自的特点采用合适的收集算法。
    
          （1）新生代中，每次垃圾收集时都发现有大批对象死去，少量存活，选用复制算法；
          （2）老年代中，对象存活率高、没有额外空间进行分配担保，使用“标记-清理”或者“标记-整理”。

* QA

    * 为什么不是1块Survivor空间而是2块？
    
        这里涉及到一个新生代和老年代的存活周期的问题，比如一个对象在新生代经历15次GC回收，就可以移到老年代了。问题来了，当我们第一次GC的时候，我们可以把Eden区的存活对象放到Survivor-1空间，但是第二次GC的时候，Survivor-1空间和Eden区的存活对象也需要再次用复制算法，放到Survivor-2空间上，而把刚刚的Survivor-1空间和Eden空间清除。第三次GC时，又把Survivor-2空间和Eden区的存活对象复制到Survivor-1空间，如此反复。
    
        所以，这里就需要2块Survivor空间来回倒腾。
        
    * 为什么Eden空间这么大而Survivor空间要分的少一点？                    
    
        1. 新创建的对象都是放在Eden空间，这是很频繁的，尤其是大量的局部变量产生的临时对象，这些对象绝大部分都应该马上被回收，能存活下来被转移到survivor空间一般不是很多。所以，设置较大的Eden空间和较小的Survivor空间是合理的，大大提高了内存的使用率，缓解了复制算法的缺点。
        
        2. 8:1:1这种比例就挺好的，当然这个比例是可以调整的，包括上面的新生代和老年代的1:2的比例也是可以调整的。
        
        3. 新的问题又来了，从Eden空间往Survivor空间转移的时候，如果出现Survivor空间不够了怎么办？直接放到老年代去。 有的对象来回在Survivor-1区或者Survivor-2区呆了比如15次，就被分配到老年代Old区；有的对象太大，超过了Eden区，直接被分配在Old区；有的存活对象，放不下Survivor区，也被分配到Old区。如果老年代Old区也被放满了，就是一次大GC即为Major GC (Full GC)。
        
### 分代回收

* 年轻代: 1 Eden 2 Survivor 复制算法
* 老年代: 标记整理

**回收策略总览**

![avator](../image/81618122257_.pic.jpg)

### JVM内存大小的取舍

1. 扩大内存可以更少的触发GC
2. 内存太大触发GC时候的停顿时间会长

    因此要根据实际的业务场景设置成一个"合适"的值，并配合压测和线上环境的实际情况做不断的调优

* 吞吐量 = 花费在非GC停顿上的工作时间 / 总时间 

    至少优化到95%
    
### 控制JVM内存大小的核心参数

* -Xms 启动JVM时堆内存的大小

* -Xmx 堆内存最大限制

    两者需要设置的一样，防止扩容缩容

* -XX:NewSize 年轻代大小

* -XX:MaxNewSize 最大年轻代大小

    两者需要设置的一样，防止扩容缩容
    
    年轻代的大小一般来说要调整的比老年代稍微大一些，因为针对互联网应用本质上来说都是针对Request驱动的，来一个Request做一笔，做完之后即销毁
    
    年轻代设置的稍许大一些，就可以保证对应的对象在触发GC次数一定的时候，尽可能减少晋升到老年代的时间，因为我们要尽可能减少老年代的GC

* -XX:SurvivorRatio Eden 与 Survivor 占比，默认8

    Eden需要比Survivor尽可能的大，防止多次触发young gc导致年龄快速增长到可以进入老年代的case

* -XX:MetaspaceSize 元空间初始空间大小

* -XX:MaxMetaspaceSize=512m 元空间最大空间，默认是没有限制的

    元数据区的空间最好是不要设置，采用默认就行
    
### CMS 和 G1 参数调优

#### GC优化

* 将进入老年代的对象减少到最低

* young gc: 40ms内

* major gc: stop the world时间总和 100ms内

* full gc: 尽可能少，且时间在1s内

除了CMS和G1外，其余的major gc = full gc

#### GC策略开启参数

|**GC类型**|**参数**|
|---|---|
|Serial GC|-XX:+UseSerialGC|
|Parallel GC|-XX:+UseParallelGCThreads=value|
|Parallel Compacing GC|-XX:+UseParallelOldGC|
|CMS GC|-XX:+UseConcMarkSweepGC-XX:UseParNewGC -XX:CMSParallelRemarkEnabled -XX:CMSInitialingOccupancyFraction=value -XX:+UseCMSInitiatingOccupancyOnly|
|G1|-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC|

#### CMS Full GC 条件

* Promotion failure: 由于内存碎片导致晋升空间不足
* Concurrent mode failure: 还未完成cms又触发了下一次major gc

#### CMS调优

* -XX:ParallelGCThreads= N 设置年轻代的并行收集线程数，避免docker踩坑
* -XX:ParallelCMSThreads= N 设置CMS的并行收集线程数，避免docker踩坑
* -XX:+UseCMSCompactAtFullCollection FullGC情况下的Initial remark or Final remark都整理内存碎片
* -XX:+CMSFullGCsBeforeCompaction=4 两次FullGC情况下的Initial remark or Final remark 4次后才整理内存碎片
* -XX:+UseCMSInitialingOccupancyOnly 让阈值驱动CMS触发时机
* -XX:CMSInitialingOccupancyFraction=70 70%占满才触发cms
* -XX:CMSParallelRemarkEnabled 并行remark
* -XX:+CMSScavengBeforeRemark remark前先做一次minor gc

#### G1参数调优

* -XX: -UseG1GC 开启G1参数
* -XX: MaxGCPauseMills=n GC最大停顿时间、软性参数
* -XX: G1HeapRegionSize=n 每个region的大小

#### 调优Best Pratise

* 多分析线上case，并设置不同的内存大小观察gc日志，寻找最佳策略
* 通过改善参数避免common类型问题


### 日志优化

* 同步日志/异步日志
* 日志归档时间
* 日志大小拆分

### 池化策略
* Idle数量

    线程池

    * IO密集型: CPU核数 * 2
    
    * 计算密集型: CPU核数 + 1
    
    连接池
    
        连接池不易开的过大
    
    * 根据实际线上来进行合理配置

### 提高数据库的读写性能

#### 单机数据库

* 查询优化

    查询优化主要是针对读多写少的场景，主要优化select相关的语句

* 批量写

    主要是解决 insert 或者 update这类批量更新的问题
    
    update在使用到索引的情况下性能还是较高的，本质上也是通过索引先将数据查询出来，然后进行修改
    
* 索引优化

* innodb相关优化

    
#### 查询优化

* 主键查询 千万条记录 1-10ms
* 唯一索引 千万条记录 10-100ms
* 非唯一索引 千万条记录 100-1000ms
* 无索引 百万条记录 1000ms+

#### 批量写

* for each { insert into table values (1) }
* Execute once insert into table values (1),(2),(3),(4)... 
* Sql编译N次和1次的时间与空间复杂度 
* 网络消耗的时间复杂度(多次网络连接)
* 磁盘寻址的复杂度(多条事务)

#### Innodb存储引擎单机配置优化

* max_connection=1000 增加最大连接数，默认为100
* innodb_file_per_table=1 可以存储每个innodb表和他索引在自己文件中
* innodb_buffer_pool_size=1G 缓存池大小，设置为当前数据库服务内存的60%-80%
* innodb_log_file_size=256M 一般取256M可以兼顾性能和recovery的速度，写满后只能切换日志靠buffer缓存
* innodb_log_buffer_size=16M 该参数确保有足够大的日志缓存区来保存脏数据在被写入到日志文件之前可以继续Mysql事务操作
* innodb_flush_log_at_trx_commit = 2

    1时，在每个事务提交时，日志缓冲被写到日志文件，对日志文件做到磁盘操作的刷新。Truly ACID。速度慢。

    2时，在每个事务提交时，日志缓冲被写到系统缓冲，但不对日志文件做到磁盘操作的刷新，然后根据 innodb_flush_log_at_timeout (默认为1s)时间 flush disk 只有操作系统崩溃或掉电才会删除最后一秒的事务，不然不会丢失事务。

    0时，效率更高，但安全性差。每秒才write日志 任何mysqlId进程的奔溃会删除崩溃前最后一秒的事务
    
* innodb_data_file_path=ibdata1:1G;ibdata2:1G;ibdata3:1G:autoextend 指定表数据和索引存储的空间，可以是一个或者多个文件。

## 3. Mysql分布式性能优化

### 读写分离

* 一主多从
* 读库延迟问题处理
* 主从切换处理

![avator](../image/12a6b5852a0ceb77327197e794f763f.png)

### 分库分表

* 垂直拆分
* 水平拆分
* 多主多从

## 4. 应对缓存问题

### 穿透、击穿、雪崩

* 穿透: 数据不存在

    ![avator](../image/ce197d17affcc45771b07b95e3ee920.png)

* 击穿: 同一数据击穿到数据库
* 雪崩: 不同的数据击穿到数据库

### 缓存脏读数据问题

* 脏读产生的原因

* 脏读如何避免

![avator](../image/4a2ec6e25b31c3794295d8423fbd63c.png)

### 多级缓存

* 前台

* 中台

* 后台

## 5. 如何解决网络瓶颈

### 网络瓶颈的根源

* 公网: 带宽，出口调用量
* 内网: 带宽，出口调用量

